name: Set up valve rust bindings

on:
  release:
    types: [released]

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-wheels:
    strategy:
      matrix:
        target: [
          { runner: "macos-latest", arch: "x86_64-apple-darwin" },
          { runner: "macos-latest", arch: "aarch64-apple-darwin" },
          { runner: "windows-latest", arch: "x86_64-pc-windows-msvc" },
          { runner: "ubuntu-latest", arch: "x86_64-unknown-linux-gnu" },
          { runner: "ubuntu-latest", arch: "x86_64-unknown-linux-musl" },
        ]
    runs-on: ${{ matrix.target.runner }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install musl-tools (MUSL)
        if: ${{ matrix.target.runner == 'ubuntu-latest' && matrix.target.arch == 'x86_64-unknown-linux-musl' }}
        run: |
          sudo apt-get update
          sudo apt-get install musl-tools

      - name: Install latest rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target.arch }}
          default: true
          override: true

      - name: Install cargo-quickinstall and cargo-download
        run: |
          cargo install cargo-quickinstall
          cargo quickinstall cargo-download

      # Note that we need to specify the bash shell here in order for the string interpolation to
      # work on the Windows runner.
      - name: Download the version, specified in ontodev_valve_version, of valve's rust library.
        shell: bash
        run: |
          cargo download ontodev_valve==`cat ontodev_valve_version` -x -o valve.rs

      - name: Create a soft-link to the valve rust library source code file.
        working-directory: ./valve.rs
        run: |
          ln -s ../../valve_py.rs src/

      - name: Edit lib.rs and add dependencies to Cargo.toml
        working-directory: ./valve.rs
        run: |
          echo "mod valve_py;" >> src/lib.rs
          cat ../extra_cargo_entries.toml >> Cargo.toml

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Build wheels (MUSL)
        if: ${{ matrix.target.runner == 'ubuntu-latest' && matrix.target.arch == 'x86_64-unknown-linux-musl' }}
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target.arch }}
          manylinux: musllinux_1_2
          args: --release --interpreter python3.9 --out dist -m valve.rs/Cargo.toml

      - name: Build wheels (non-MUSL)
        if: ${{ matrix.target.runner != 'ubuntu-latest' || matrix.target.arch != 'x86_64-unknown-linux-musl' }}
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target.arch }}
          args: --release --out dist -m valve.rs/Cargo.toml

      - name: Install twine
        run: |
          pip install twine

      - name: Build and publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository testpypi dist/*
